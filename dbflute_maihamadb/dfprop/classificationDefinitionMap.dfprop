# /---------------------------------------------------------------------------
# classificationDefinitionMap: (NotRequired - Default map:{})
#
# The definition of classification.
#
# Specification:
# map: {
#     [classification-name] = list:{
#         ; map:{
#             ; topComment=[comment]; codeType=[String(default) or Number or Boolean]
#             ; undefinedHandlingType=[EXCEPTION or LOGGING(default) or ALLOWED]
#             ; isUseDocumentOnly=[true or false(default)]
#             ; isSuppressAutoDeploy=[true or false(default)]
#             ; groupingMap = map:{
#                 ; [group-name] = map:{
#                     ; groupComment=[comment]
#                     ; elementList=list:{[the list of classification element's name]}
#                 }
#             }
#         }
#         # classification elements for implicit classification
#         ; map:{
#             ; code=[code]; name=[name]; alias=[alias]; comment=[comment]
#             ; sisterCode=[code or code-list]; subItemMap=map:{[free-map]}
#         }
#         # settings for table classification
#         ; map:{
#             ; table=[table-name]
#             ; code=[column-name for code]; name=[column-name for name]
#             ; alias=[column-name for alias]; comment=[column-name for comment]}
#             ; where=[condition for select]; orderBy=[column-name for ordering]
#             ; exceptCodeList=[the list of except code]
#         }
#     }
# }
#
# *The line that starts with '#' means comment-out.
#
map:{
    # example for implicit classification
    #; Flg = list:{
    #    ; map:{topComment=general boolean classification for every flg-column; codeType=Number}
    #    ; map:{code=1; name=True ; alias=Checked  ; comment=means yes; sisterCode=true}
    #    ; map:{code=0; name=False; alias=Unchecked; comment=means no ; sisterCode=false}
    #}
    # example for table classification
    #; MemberStatus = list:{
    #    ; map:{topComment=status of member from entry to withdrawal; codeType=String}
    #    ; map:{
    #        ; table=MEMBER_STATUS
    #        ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
    #        ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
    #    }
    #}
    ; Flg = list:{
        ; map:{topComment=フラグを示す; codeType=Number}
        ; map:{
            ; code=1; name=True ; alias=はい  ; comment=有効を示す
            ; sisterCode=true
        }
        ; map:{
            ; code=0; name=False; alias=いいえ; comment=無効を示す
            ; sisterCode=false
        }
    }
    ; MemberStatus = list:{
        ; map:{
            ; topComment=status of member from entry to withdrawal; codeType=String
            ; groupingMap = map:{
               ; serviceAvailable = map:{
                   ; groupComment = サービスが利用できる会員
                   ; elementList = list:{正式会員;仮会員}
               }
            }
        }
        ; map:{
            ; table=MEMBER_STATUS
            ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
            ; subItemMap=map:{
                ; displayOrder=DISPLAY_ORDER
            }
        }
    }
    ; ServiceRank = list:{
        ; map:{topComment=会員が受けられるサービスのランクを示す; codeType=String}
        ; map:{
            ; table=SERVICE_RANK
            ; code=SERVICE_RANK_CODE; name=SERVICE_RANK_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
        }
    }
    ; Region = list:{
        ; map:{topComment=主に会員の住んでいる地域を示す; codeType=Number}
        ; map:{
            ; table=REGION
            ; code=REGION_ID; name=REGION_NAME
            ; orderBy=REGION_ID
        }
    }
    ; WithdrawalReason = list:{
        ; map:{topComment=会員の退会理由。なのでちょっとねがてぃぶ; codeType=String}
        ; map:{
            ; table=WITHDRAWAL_REASON
            ; code=WITHDRAWAL_REASON_CODE; name=WITHDRAWAL_REASON_CODE
            ; comment=WITHDRAWAL_REASON_TEXT; orderBy=DISPLAY_ORDER
        }
    }
    ; ProductCategory = list:{
        ; map:{topComment=商品のカテゴリ。階層構造である; codeType=String}
        ; map:{
            ; table=$sql:
 PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
            ; code=$sql: loc.PRODUCT_CATEGORY_CODE
            ; name=$sql: loc.PRODUCT_CATEGORY_NAME
            ; comment=$sql: 'of ' || rel.PRODUCT_CATEGORY_NAME
            ; orderBy=loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
        }
    }
    ; ProductStatus = list:{
        ; map:{topComment=商品ステータス。あんまり面白みのないステータス; codeType=String}
        ; map:{
            ; table=PRODUCT_STATUS
            ; code=PRODUCT_STATUS_CODE; name=PRODUCT_STATUS_NAME
        }
    }
    ; PaymentMethod = list:{
        ; map:{
            ; topComment=支払方法; codeType=String
            ; isCheckImplicitSet=true
            ; groupingMap = map:{
                ; recommended = map:{
                    ; groupComment = 最も推奨されている方法
                    ; elementList = list:{ByHand}
                }
            }
        }
        ; map:{code=HAN; name=ByHand; alias=手渡し; comment=Face-to-Faceの手渡しで商品と交換}
        ; map:{code=BAK; name=BankTransfer; alias=銀行振込; comment=銀行振込で確認してから商品発送}
        ; map:{code=CRC; name=CreditCard; alias=クレジットカード; comment=クレジットカードの番号を教えてもらう}
    }

}
# ----------------/
